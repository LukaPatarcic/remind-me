import { useEffect } from 'react';

import type { NextPage } from 'next';

import Head from 'next/head';

import { MapIcon } from '@heroicons/react/24/outline';
import { useForm } from 'react-hook-form';

import { trpc } from '../utils/trpc';

interface FormData {
    reminder: string;
    dateTime: string;
}

const Home: NextPage = () => {
    const { register, handleSubmit } = useForm<FormData>();
    const { data } = trpc.useQuery(['reminder.get']);
    const utils = trpc.useContext();
    const { mutate } = trpc.useMutation('reminder.mutate', {
        onSuccess() {
            utils.invalidateQueries(['reminder.get']);
        },
    });
    const onSubmit = handleSubmit((data) => {
        mutate(data);
    });

    useEffect(() => {
        if (navigator?.serviceWorker) navigator.serviceWorker.register('sw.js');
        Notification.requestPermission().then(console.log).catch(console.log);
        navigator.serviceWorker.ready.then((sw) =>
            sw.showNotification('title', {
                body: 'body',
                timestamp: 1661517756,
            })
        );
    }, []);

    return (
        <>
            <Head>
                <title>Remind me</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <div className="mx-auto flex max-w-3xl flex-col items-center justify-start space-y-4 sm:flex-row sm:items-end sm:justify-around sm:space-y-0">
                <div className="w-full max-w-lg divide-y divide-layer-3">
                    <form onSubmit={onSubmit}>
                        <div>
                            <label
                                htmlFor="reminder"
                                className="block text-sm font-semibold text-text-important"
                            >
                                Reminder
                            </label>
                            <input
                                id="reminder"
                                {...register('reminder')}
                                type="text"
                                placeholder="Remind me to..."
                                className="mt-2 block w-full rounded-xl border-2 border-border bg-transparent px-4 py-2.5 font-semibold text-white placeholder:text-input-placeholder focus:border-primary focus:outline-none focus:ring-0 sm:text-sm"
                            />
                        </div>
                        <div>
                            <label htmlFor="dateTime">
                                Birthday (date and time):
                            </label>
                            <input
                                id="dateTime"
                                {...register('dateTime')}
                                type="datetime-local"
                                className="mt-2 block w-full rounded-xl border-2 border-border bg-transparent px-4 py-2.5 font-semibold text-white placeholder:text-input-placeholder focus:border-primary focus:outline-none focus:ring-0 sm:text-sm"
                            />
                        </div>
                        <div>
                            <button
                                type="submit"
                                className="inline-flex cursor-pointer items-center justify-center rounded-xl border-2 border-primary bg-primary px-3 py-2 text-xs font-semibold text-white shadow-sm hover:border-primary-accent hover:bg-primary-accent focus:outline-none focus:ring-2 focus:ring-white/80 focus:ring-offset-0 disabled:opacity-30 disabled:hover:border-primary disabled:hover:bg-primary disabled:hover:text-white"
                            >
                                <MapIcon className="mr-2 h-4 w-4" />
                                Button
                            </button>
                        </div>
                    </form>
                    {data?.map((item) => (
                        <label key={item.id} className="block py-4">
                            <div className="flex h-full items-center space-x-4">
                                <input
                                    type="checkbox"
                                    name="inputName"
                                    id="inputName:1"
                                    className="h-5 w-5 rounded border-2 border-text bg-transparent text-primary focus:ring-primary focus:ring-offset-0 checked:focus:ring-text disabled:opacity-30"
                                />
                                <h4 className="text-base font-semibold text-white">
                                    {item.reminder}
                                </h4>
                            </div>
                            {/* <p className="mt-2 ml-9 text-sm font-medium text-text">
                                Lorem ipsum dolor sit amet, consectetur
                                adipiscing elit. Elementum hac porttitor.
                            </p> */}
                        </label>
                    ))}
                </div>
            </div>
        </>
    );
};

export default Home;
